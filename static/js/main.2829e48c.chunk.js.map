{"version":3,"sources":["leaderboard/components/tprTable.js","leaderboard/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","checkIcon","color","firstColumn","position","left","backgroundColor","minWidth","head","oddRow","TPRTable","props","participants","classes","arrayDate","month","year","date","Date","days","getMonth","push","setDate","getDate","getDateInMonth","formatDate","dateDate","day","passOrNot","records","index","findIndex","element","getTime","value","className","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","map","item","align","TableBody","body","scope","displayName","id","leaderboardContainer","textAlign","Leaderboard","useState","setParticipants","challengeName","setChallengeName","url","a","axios","post","query","responseGetChallenges","data","getChallenges","challengeNameRes","name","React","useEffect","getChallengeInfo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2829e48c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  checkIcon: {\r\n    color: '#13cf00'\r\n  },\r\n  firstColumn: {\r\n    position: 'sticky',\r\n    left: 0,\r\n    backgroundColor: '#ffff',\r\n    minWidth: '150px'\r\n  },\r\n  head: {\r\n    'tr': {\r\n      'th': {\r\n        backgroundColor: '#343a40',\r\n        color: '#ffff !important'\r\n      }\r\n    }\r\n  },\r\n  oddRow: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.04)'\r\n  },\r\n}));\r\n\r\nfunction TPRTable(props) {\r\n  const { participants } = props;\r\n  const classes = useStyles();\r\n  const arrayDate = getDateInMonth(9, 2021);\r\n\r\n  function getDateInMonth(month, year) {\r\n    let date = new Date(year, month - 1, 1);\r\n    let days = [];\r\n    while (date.getMonth() === month - 1) {\r\n      days.push(new Date(date));\r\n      date.setDate(date.getDate() + 1);\r\n    }\r\n    return days;\r\n  }\r\n\r\n  function formatDate(dateDate) {\r\n    let day = dateDate.getDate();\r\n    let month = dateDate.getMonth() + 1;\r\n    return `${day}/${month}`;\r\n  }\r\n\r\n  function passOrNot(dateDate, records) {\r\n    let index = records.findIndex(element => {\r\n      let dateInElementDate = new Date(element.date);\r\n      return dateInElementDate.getTime() === dateDate.getTime()\r\n    });\r\n    let isPass = index !== -1 && records[index].value === 'true';\r\n    if (isPass) {\r\n      return <CheckCircleIcon className={classes.checkIcon} />\r\n    }\r\n  }\r\n\r\n\r\n  if (participants.length) {\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead className={classes.head}>\r\n            <TableRow>\r\n              <TableCell className={classes.firstColumn}>Runner Name</TableCell>\r\n              {arrayDate.map(item => (\r\n                <TableCell align=\"center\">{formatDate(item)}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody className={classes.body}>\r\n            {participants.map((item, index) => (\r\n              <TableRow key={item.id} className={index % 2 === 0 ? classes.oddRow : ''}>\r\n                <TableCell component=\"th\" scope=\"row\" className={classes.firstColumn}>\r\n                  <div>{item.displayName}</div>\r\n                  <div>{`${item.records.length}/${arrayDate.length}`}</div>\r\n                </TableCell>\r\n                {arrayDate.map(element => (\r\n                  <TableCell align=\"center\">{passOrNot(element, item.records)}</TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  }\r\n\r\n  return <div></div>\r\n}\r\n\r\nexport default TPRTable;","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TPRTable from './components/tprTable';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  leaderboardContainer:{\r\n    textAlign: 'center'\r\n  }\r\n}));\r\n\r\nfunction Leaderboard() {\r\n  const [participants, setParticipants] = useState([]);\r\n  const [challengeName, setChallengeName] = useState('');\r\n  const classes = useStyles();\r\n  const url = 'https://bao-bin-server.de.r.appspot.com/tprs/challenge';\r\n\r\n  async function getChallengeInfo() {\r\n    const responseGetChallenges = await axios.post(url, {\r\n      query: `{\r\n        getChallenges{\r\n          id\r\n          name\r\n          startDate\r\n          endDate\r\n          description\r\n          participants{\r\n            id\r\n            displayName\r\n            facebookProfile\r\n            register{\r\n              date\r\n              value\r\n            }\r\n            records{\r\n              date\r\n              value\r\n            }\r\n          }\r\n        }\r\n      }`\r\n    });\r\n    let participants = responseGetChallenges?.data?.data?.getChallenges?.[0]?.participants ?? [];\r\n    const challengeNameRes = responseGetChallenges?.data?.data?.getChallenges?.[0]?.name ?? '';\r\n    setChallengeName(challengeNameRes);\r\n    setParticipants(participants);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    getChallengeInfo();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.leaderboardContainer}>\r\n      <h1>{challengeName}</h1>\r\n      <TPRTable participants={participants} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Leaderboard;\r\n","import LeaderBoard from './leaderboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LeaderBoard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}